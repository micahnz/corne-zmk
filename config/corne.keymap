#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&caps_word { continue-list = <UNDERSCORE BACKSPACE DELETE MINUS>; };

&sk {
    release-after-ms = <500>;
    quick-release;
};

/ {
    macros {
        // key press no repeat

        kpnr: kpnr {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_param_1to1>,
                <&macro_tap &kp MACRO_PLACEHOLDER>;

            label = "Key tap macro";
        };

        // basic layer mod &lm <layer> <mod>

        lm: lm {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings
                = <&macro_param_1to1>
                , <&macro_press &mo MACRO_PLACEHOLDER>
                , <&macro_param_2to1>
                , <&macro_press &kp MACRO_PLACEHOLDER>
                , <&macro_pause_for_release>
                , <&macro_param_2to1>
                , <&macro_release &kp MACRO_PLACEHOLDER>
                , <&macro_param_1to1>
                , <&macro_release &mo MACRO_PLACEHOLDER>
                ;
        };

        // layer mod left mod combos for additive mod combos
        lm_left: lm_left {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings
                = <&macro_press &mo 9>
                , <&macro_param_1to1>
                , <&macro_press &kp MACRO_PLACEHOLDER>
                , <&macro_pause_for_release>
                , <&macro_param_1to1>
                , <&macro_release &kp MACRO_PLACEHOLDER>
                , <&macro_release &mo 9>
                ;
        };

        // layer mod left mod combos for additive mod combos with sticky key
        lm_left_sk: lm_left_sk {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings
                = <&macro_press &mo 9>
                , <&macro_param_1to1>
                , <&macro_press &sk MACRO_PLACEHOLDER>
                , <&macro_pause_for_release>
                , <&macro_param_1to1>
                , <&macro_release &sk MACRO_PLACEHOLDER>
                , <&macro_release &mo 9>
                ;
        };

        // layer mod left special case for initiating tab combos
        lm_left_tab: lm_left_tab {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings
                = <&macro_press &mo 9>
                , <&macro_param_1to1>
                , <&macro_press &kp MACRO_PLACEHOLDER>
                , <&macro_param_2to1>
                , <&macro_tap &kp MACRO_PLACEHOLDER>
                , <&macro_pause_for_release>
                , <&macro_param_1to1>
                , <&macro_release &kp MACRO_PLACEHOLDER>
                , <&macro_release &mo 9>
                ;
        };

        // layer mod right mod combos for additive mod combos
        lm_right: lm_right {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings
                = <&macro_press &mo 10>
                , <&macro_param_1to1>
                , <&macro_press &kp MACRO_PLACEHOLDER>
                , <&macro_pause_for_release>
                , <&macro_param_1to1>
                , <&macro_release &kp MACRO_PLACEHOLDER>
                , <&macro_release &mo 10>
                ;
        };
    };

    behaviors {
        // double tap hold num layer for function key layer

        td_num_fn: td_num_fn {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <500>;
            bindings = <&mo 3>, <&mo 6>;
        };

        // double tab left shift for caps_word

        td_ls: td_ls {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <500>;
            bindings = <&kp LEFT_SHIFT>, <&caps_word>;
        };

        // double tab right shift for caps_word

        td_rs: td_rs {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <500>;
            bindings = <&kp RIGHT_SHIFT>, <&caps_word>;
        };

        // basic hold tap

        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        // basic sticky hold taps

        sk_ht: sk_ht {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&sk>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        // holp tap layer mod for left mod layer
        ht_lm_left: ht_lm_left {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&lm_left>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        ht_lm_left_sk: ht_lm_left_sk {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&lm_left_sk>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };
        
        ht_lm_right: ht_lm_right {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&lm_right>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };
    };

    combos {
        compatible = "zmk,combos";

        L_GUI {
            bindings = <&ht_lm_left_sk LEFT_GUI LEFT_GUI>;
            key-positions = <17 16>;
        };

        L_GUI_SHIFT {
            bindings = <&ht_lm_left_sk LS(LEFT_GUI) LS(LEFT_GUI)>;
            key-positions = <17 3>;
        };

        L_GUI_CTRL {
            bindings = <&ht_lm_left_sk LC(LEFT_GUI) LC(LEFT_GUI)>;
            key-positions = <17 15>;
        };

        L_GUI_ALT {
            bindings = <&ht_lm_left_sk LA(LEFT_GUI) LA(LEFT_GUI)>;
            key-positions = <17 13>;
        };

        L_GUI_CTRL_SHIFT {
            bindings = <&ht_lm_left_sk LS(LC(LEFT_GUI)) LS(LC(LEFT_GUI))>;
            key-positions = <17 15 16>;
        };

        L_CTRL {
            bindings = <&ht_lm_left_sk LEFT_CONTROL LEFT_CONTROL>;
            key-positions = <14 15>;
        };

        L_ALT {
            bindings = <&ht_lm_left_sk LEFT_ALT LEFT_ALT>;
            key-positions = <13 14>;
        };

        L_ALT_SHIFT {
            bindings = <&ht_lm_left_sk LA(LEFT_SHIFT) LA(LEFT_SHIFT)>;
            key-positions = <16 13>;
        };

        L_SHIFT {
            bindings = <&td_ls>;
            key-positions = <16 15>;
        };

        L_CTRL_SHIFT {
            bindings = <&ht_lm_left_sk LC(LEFT_SHIFT) LC(LEFT_SHIFT)>;
            key-positions = <16 15 14>;
        };

        L_CTRL_ALT {
            bindings = <&ht_lm_left_sk LC(LEFT_ALT) LC(LEFT_ALT)>;
            key-positions = <13 14 15>;
        };

        L_CTRL_ALT_SHIFT {
            bindings = <&ht_lm_left_sk LC(LA(LEFT_SHIFT)) LC(LA(LEFT_SHIFT))>;
            key-positions = <13 16 14 15>;
        };

        L_TAB {
            bindings = <&kp TAB>;
            key-positions = <4 3>;
        };

        L_SHIFT_TAB {
            bindings = <&kp LS(TAB)>;
            key-positions = <4 3 2>;
        };

        L_ALT_TAB {
            bindings = <&lm_left_tab LEFT_ALT TAB>;
            key-positions = <4 13>;
            slow-release;
        };

        L_ALT_SHIFT_TAB {
            bindings = <&lm_left_tab LEFT_ALT LS(TAB)>;
            key-positions = <4 13 3>;
            slow-release;
        };

        L_CTRL_TAB {
            bindings = <&lm_left_tab LEFT_CONTROL TAB>;
            key-positions = <4 14>;
            slow-release;
        };

        L_CTRL_SHIFT_TAB {
            bindings = <&lm_left_tab LEFT_CONTROL LS(TAB)>;
            key-positions = <4 14 3>;
            slow-release;
        };

        L_GUI_TAB {
            bindings = <&lm_left_tab LEFT_GUI TAB>;
            key-positions = <17 4>;
            slow-release;
        };

        L_GUI_SHIFT_TAB {
            bindings = <&lm_left_tab LEFT_GUI LS(TAB)>;
            key-positions = <17 3 4>;
            slow-release;
        };

        L_ESC {
            bindings = <&kp ESCAPE>;
            key-positions = <2 3>;
        };

        L_ENTER {
            bindings = <&kp ENTER>;
            key-positions = <27 28>;
        };

        R_GUI {
            bindings = <&ht_lm_right RIGHT_GUI RIGHT_GUI>;
            key-positions = <18 19>;
        };

        R_GUI_SHIFT {
            bindings = <&ht_lm_right RS(RIGHT_GUI) RS(RIGHT_GUI)>;
            key-positions = <18 8>;
        };

        R_GUI_CTRL {
            bindings = <&ht_lm_right RC(RIGHT_GUI) RC(RIGHT_GUI)>;
            key-positions = <18 20>;
        };

        R_GUI_ALT {
            bindings = <&ht_lm_right RA(RIGHT_GUI) RA(RIGHT_GUI)>;
            key-positions = <18 22>;
        };

        R_GUI_CTRL_SHIFT {
            bindings = <&ht_lm_right RS(RC(RIGHT_GUI)) RS(RC(RIGHT_GUI))>;
            key-positions = <18 20 19>;
        };

        R_CTRL {
            bindings = <&ht_lm_right RIGHT_CONTROL RIGHT_CONTROL>;
            key-positions = <21 20>;
        };

        R_ALT {
            bindings = <&ht_lm_right RIGHT_ALT RIGHT_ALT>;
            key-positions = <22 21>;
        };

        R_ALT_SHIFT {
            bindings = <&ht_lm_right RA(LEFT_SHIFT) RA(LEFT_SHIFT)>;
            key-positions = <19 22>;
        };

        R_SHIFT {
            bindings = <&td_rs>;
            key-positions = <20 19>;
        };

        R_CTRL_SHIFT {
            bindings = <&ht_lm_right RC(RIGHT_SHIFT) RC(RIGHT_SHIFT)>;
            key-positions = <19 20 21>;
        };

        R_CTRL_ALT {
            bindings = <&ht_lm_right RC(RIGHT_ALT) RC(RIGHT_ALT)>;
            key-positions = <22 21 20>;
        };

        R_CTRL_ALT_SHIFT {
            bindings = <&ht_lm_right RC(RA(RIGHT_SHIFT)) RC(RA(RIGHT_SHIFT))>;
            key-positions = <19 22 21 20>;
        };

        R_DEL {
            bindings = <&kp DELETE>;
            key-positions = <8 9>;
        };

        R_BACKSPACE {
            bindings = <&kp BACKSPACE>;
            key-positions = <7 8>;
        };

        R_ENTER {
            bindings = <&kp ENTER>;
            key-positions = <31 32>;
        };

        R_SHIFT_ENTER {
            bindings = <&kp RS(ENTER)>;
            key-positions = <31 32 33>;
        };

        L_R_SHIFT {
            bindings = <&kp CAPSLOCK>;
            key-positions = <16 15 19 20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_alpha {
            bindings = <
&none  &kp Q  &kp W  &kp F  &kp P  &kp B         &kp J  &kp L      &kp U      &kp Y    &kp SINGLE_QUOTE  &none
&none  &kp A  &kp R  &kp S  &kp T  &kp G         &kp M  &kp N      &kp E      &kp I    &kp O             &none
&none  &kp Z  &kp X  &kp C  &kp D  &kp V         &kp K  &kp H      &kp COMMA  &kp DOT  &kp SLASH         &none
                     &mo 7  &mo 2  &td_num_fn    &mo 5  &kp SPACE  &mo 8
            >;
        };

        game_alpha {
            bindings = <
&none  &kp TAB    &kp Q  &kp W  &kp E  &kp R        &kp T  &kp Y  &kp U  &kp I  &kp O  &none
&none  &kp LSHFT  &kp A  &kp S  &kp D  &kp F        &kp G  &kp H  &kp J  &kp K  &kp L  &none
&none  &kp LCTRL  &kp Z  &kp X  &kp C  &kp V        &kp B  &kp N  &kp M  &kp P  &none  &none
                         &mo 7  &mo 4  &kp SPACE    &mo 5  &mo 2  &mo 8
            >;
        };

        nav {
            bindings = <
&none  &kp LG(LC(LA(Q)))  &kp LG(LC(LA(W)))  &kp LG(LC(LA(F)))  &kp LG(LC(LA(P)))  &kp LG(LC(LA(B)))    &kp PRINTSCREEN  &kp PAGE_UP     &kp UP_ARROW    &kp PAGE_DOWN    &none  &none
&none  &none              &none              &kp DEL            &kp BACKSPACE      &kp SPACE            &kp CAPSLOCK     &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &none  &none
&none  &kp LC(Z)          &kp LC(X)          &kp LC(C)          &kp LC(Y)          &kp LC(V)            &kp INSERT       &kp HOME        &none           &kp END          &none  &none
                                             &none              &trans             &trans               &trans           &trans          &trans
            >;
        };

        num {
            bindings = <
&none  &kp LEFT_PARENTHESIS  &kp N7  &kp N8  &kp N9  &kp RIGHT_PARENTHESIS    &kp LESS_THAN  &kp DOLLAR  &kp CARET  &kp PERCENT   &kp GREATER_THAN  &none
&none  &kp N0                &kp N4  &kp N5  &kp N6  &none                    &kp EQUAL      &kp PLUS    &kp MINUS  &kp ASTERISK  &kp SLASH         &none
&none  &kp PERIOD            &kp N1  &kp N2  &kp N3  &kp COMMA                &none          &none       &none      &none         &none             &none
                                     &trans  &trans  &trans                   &trans         &trans      &trans
            >;
        };

        game_num {
            bindings = <
&none  &kp ESC  &kp N4  &kp N5  &kp N6  &trans    &trans  &trans  &trans  &trans  &trans  &none
&none  &trans   &kp N1  &kp N2  &kp N3  &kp N0    &trans  &trans  &trans  &trans  &trans  &none
&none  &trans   &kp N7  &kp N8  &kp N9  &trans    &trans  &trans  &trans  &trans  &trans  &none
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        symbol {
            bindings = <
&none  &kp GRAVE  &kp TILDE      &kp CARET         &kp DOLLAR            &kp HASH     &kp EXCLAMATION  &kp AMPERSAND          &kp AT_SIGN        &kp PERCENT       &kp ASTERISK   &none
&none  &kp PIPE   &kp COLON      &kp MINUS         &kp LEFT_PARENTHESIS  &kp EQUAL    &kp PLUS         &kp RIGHT_PARENTHESIS  &kp UNDERSCORE     &kp SEMICOLON     &kp BACKSLASH  &none
&none  &none      &kp LESS_THAN  &kp LEFT_BRACKET  &kp LEFT_BRACE        &none        &none            &kp RIGHT_BRACE        &kp RIGHT_BRACKET  &kp GREATER_THAN  &kp QUESTION   &none
                                 &trans            &trans                &trans       &trans           &trans                 &trans
            >;
        };

        fn {
            bindings = <
&none  &kp F12  &kp F7  &kp F8  &kp F9  &none     &none   &none   &none   &none  &none  &none
&none  &kp F11  &kp F4  &kp F5  &kp F6  &none     &none   &none   &none   &none  &none  &none
&none  &kp F10  &kp F1  &kp F2  &kp F3  &none     &none   &none   &none   &none  &none  &none
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        sys_left {
            bindings = <
&none  &bt BT_CLR    &out OUT_BLE  &out OUT_USB  &sys_reset    &bootloader     &none   &none           &kp C_VOL_DN      &kp C_VOLUME_UP  &none       &none
&none  &none         &none         &none         &none         &none           &none   &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_STOP       &kp C_NEXT  &none
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none   &none           &none             &none            &none       &none
                                   &trans        &trans        &trans          &trans  &trans          &trans
            >;
        };

        sys_right {
            bindings = <
&none  &none  &none  &none   &none   &none     &bootloader  &sys_reset  &none   &none  &tog 1  &none
&none  &none  &none  &none   &none   &none     &none        &none       &none   &none  &none   &none
&none  &none  &none  &none   &none   &none     &none        &none       &none   &none  &none   &none
                     &trans  &trans  &trans    &trans       &trans      &trans
            >;
        };

        mod_layer_left {
            bindings = <
&trans  &trans        &trans            &kp LEFT_SHIFT  &kp TAB         &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &sk LEFT_ALT  &sk LEFT_CONTROL  &sk LCTRL       &sk LEFT_SHIFT  &sk LEFT_GUI    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans            &trans          &trans          &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                        &trans          &trans          &trans          &trans  &trans  &trans
            >;
        };

        mod_layer_right {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans         &trans           &trans             &trans             &trans         &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp RIGHT_GUI  &kp RIGHT_SHIFT  &kp RIGHT_CONTROL  &kp RIGHT_CONTROL  &kp RIGHT_ALT  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans         &trans           &trans             &trans             &trans         &trans
                        &trans  &trans  &trans    &trans         &trans           &trans
            >;
        };
    };
};
