#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        R_CTRL {
            bindings = <&kp RIGHT_CONTROL>;
            key-positions = <21 20>;
        };

        R_ALT {
            bindings = <&kp RIGHT_ALT>;
            key-positions = <22 21>;
        };

        R_SHIFT {
            bindings = <&kp RIGHT_SHIFT>;
            key-positions = <20 19>;
        };

        R_CTRL_SHIFT {
            bindings = <&kp RC(RIGHT_SHIFT)>;
            key-positions = <19 20 21>;
        };

        R_CTRL_ALT {
            bindings = <&kp RC(RIGHT_ALT)>;
            key-positions = <22 21 20>;
        };

        R_ALT_SHIFT {
            bindings = <&kp RA(LEFT_SHIFT)>;
            key-positions = <19 22>;
        };

        R_CTRL_ALT_SHIFT {
            bindings = <&kp RC(RA(RIGHT_SHIFT))>;
            key-positions = <19 20 21 22>;
        };

        R_GUI {
            bindings = <&kp RIGHT_GUI>;
            key-positions = <22 18>;
        };

        L_CTRL {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <14 15>;
        };

        L_ALT {
            bindings = <&kp LEFT_ALT>;
            key-positions = <13 14>;
        };

        L_SHIFT {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <16 15>;
        };

        L_CTRL_SHIFT {
            bindings = <&kp LC(LEFT_SHIFT)>;
            key-positions = <16 15 14>;
        };

        L_CTRL_ALT {
            bindings = <&kp LC(LEFT_ALT)>;
            key-positions = <13 14 15>;
        };

        L_ALT_SHIFT {
            bindings = <&kp LA(LEFT_SHIFT)>;
            key-positions = <13 16>;
        };

        L_CTRL_ALT_SHIFT {
            bindings = <&kp LC(LA(LEFT_SHIFT))>;
            key-positions = <13 14 15 16>;
        };

        L_GUI {
            bindings = <&kp LEFT_GUI>;
            key-positions = <13 17>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&none  &kp Q  &kp W  &kp F  &kp P  &kp B    &kp J  &kp L      &kp U      &kp Y    &kp SINGLE_QUOTE  &none
&none  &kp A  &kp R  &kp S  &kp T  &kp G    &kp M  &kp N      &kp E      &kp I    &kp O             &none
&none  &kp Z  &kp X  &kp C  &kp D  &kp V    &kp K  &kp H      &kp COMMA  &kp DOT  &kp SLASH         &none
                     &mo 5  &mo 1  &mo 2    &mo 3  &kp SPACE  &mo 6
            >;
        };

        nav {
            bindings = <
&none  &none       &none    &kp CARET   &kp DOLLAR     &none     &kp PRINTSCREEN  &kp HOME        &kp PAGE_DOWN   &kp PAGE_UP   &kp END          &none
&none  &kp ESCAPE  &kp TAB  &kp DELETE  &kp BACKSPACE  &none     &kp CAPSLOCK     &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &none
&none  &none       &none    &none       &none          &none     &kp INSERT       &none           &none           &none         &none            &none
                            &none       &trans         &trans    &trans           &kp ENTER       &trans
            >;
        };

        math_number {
            bindings = <
&none  &none          &kp PERCENT      &kp CARET             &kp DOLLAR             &kp LESS_THAN       &kp DELETE  &kp N7        &kp N8  &kp N9  &kp BACKSPACE  &none
&none  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp KP_MINUS          &kp KP_PLUS            &kp EQUAL           &kp DOT     &kp N4        &kp N5  &kp N6  &kp NUMBER_0   &none
&none  &none          &none            &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp GREATER_THAN    &kp COMMA   &kp N1        &kp N2  &kp N3  &none          &none
                                       &trans                &trans                 &trans              &trans      &kp KP_ENTER  &trans
            >;
        };

        symbol {
            bindings = <
&none  &kp TILDE  &kp GRAVE          &kp AT_SIGN           &kp LESS_THAN     &kp HASH     &kp EXCLAMATION  &kp DOLLAR     &kp AMPS   &kp PERCENT   &kp ASTERISK    &none
&none  &kp CARET  &kp PIPE           &kp LEFT_PARENTHESIS  &kp LEFT_BRACE    &kp COLON    &kp SEMICOLON    &kp SLASH      &kp EQUAL  &kp MINUS     &kp UNDERSCORE  &none
&none  &none      &kp DOUBLE_QUOTES  &kp SQT               &kp LEFT_BRACKET  &kp COMMA    &kp PERIOD       &kp BACKSLASH  &kp PLUS   &kp QUESTION  &none           &none
                                     &trans                &trans            &trans       &trans           &trans         &trans
            >;
        };

        symbol_upper {
            bindings = <
&trans  &trans  &trans  &trans                 &kp GREATER_THAN   &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE    &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans                 &kp RIGHT_BRACKET  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans                 &trans             &trans    &trans  &trans  &trans
            >;
        };

        bt_sys_media {
            bindings = <
&none  &bt BT_CLR    &none         &none         &sys_reset    &bootloader     &none   &none           &kp C_VOL_DN      &kp C_VOLUME_UP  &none       &none
&none  &none         &none         &none         &none         &none           &none   &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_STOP       &kp C_NEXT  &none
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none   &none           &none             &none            &none       &none
                                   &trans        &trans        &trans          &trans  &trans          &trans
            >;
        };

        fn_sys {
            bindings = <
&none  &kp F12  &kp F7  &kp F8  &kp F9  &none    &bootloader  &sys_reset  &none   &none  &none  &none
&none  &kp F11  &kp F4  &kp F5  &kp F6  &none    &none        &none       &none   &none  &none  &none
&none  &kp F10  &kp F1  &kp F2  &kp F3  &none    &none        &none       &none   &none  &none  &none
                        &none   &none   &none    &none        &none       &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        symbol_upper {
            if-layers = <3 1>;
            then-layer = <4>;
        };
    };
};
